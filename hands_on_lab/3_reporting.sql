-- Student 360 â€“ Reporting dynamic tables (DOWNSTREAM refresh)

USE ROLE SYSADMIN;
USE WAREHOUSE COMPUTE_WH;
USE DATABASE STUDENT_DATA_WAREHOUSE;

-- =============================================================
-- StudentTermSummary: one row per student + term
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.STUDENT_TERM_SUMMARY
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
WITH enroll_agg AS (
  SELECT
    e.STUDENT_ID,
    e.TERM_ID,
    COUNT(DISTINCT e.COURSE_SECTION_ID) AS NUM_COURSES,
    SUM(e.ATTEMPTED_UNITS) AS TOTAL_UNITS
  FROM FACT.ENROLLMENT e
  GROUP BY e.STUDENT_ID, e.TERM_ID
),
gpa_by_term AS (
  SELECT
    e.STUDENT_ID,
    e.TERM_ID,
    SUM(e.GRADE_POINTS * e.ATTEMPTED_UNITS) / NULLIF(SUM(e.ATTEMPTED_UNITS), 0) AS TERM_GPA,
    t.END_DATE AS TERM_END_DATE
  FROM FACT.ENROLLMENT e
  JOIN DIM.TERM t ON t.TERM_ID = e.TERM_ID
  WHERE e.GRADE_POINTS IS NOT NULL
  GROUP BY e.STUDENT_ID, e.TERM_ID, t.END_DATE
),
prior_gpa AS (
  SELECT
    ea.STUDENT_ID,
    ea.TERM_ID,
    g.TERM_GPA AS PRIOR_TERM_GPA
  FROM enroll_agg ea
  JOIN DIM.TERM tcur ON tcur.TERM_ID = ea.TERM_ID
  JOIN gpa_by_term g
    ON g.STUDENT_ID = ea.STUDENT_ID
   AND g.TERM_END_DATE < tcur.START_DATE
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ea.STUDENT_ID, ea.TERM_ID ORDER BY g.TERM_END_DATE DESC) = 1
),
engagement AS (
  SELECT
    ed.STUDENT_ID,
    s.TERM_ID,
    SUM(ed.EVENT_COUNT) AS ENGAGEMENT_EVENTS_TTD
  FROM FACT.ENGAGEMENT_DAILY ed
  JOIN DIM.SECTION s ON s.COURSE_SECTION_ID = ed.COURSE_SECTION_ID
  GROUP BY ed.STUDENT_ID, s.TERM_ID
),
financial AS (
  SELECT
    t.STUDENT_ID,
    t.TERM_ID,
    SUM(IFF(t.IS_CHARGE = 1, t.AMOUNT, 0)) AS TOTAL_CHARGES,
    SUM(IFF(t.IS_PAYMENT = 1, t.AMOUNT, 0)) AS TOTAL_PAYMENTS,
    SUM(t.SIGNED_AMOUNT) AS BALANCE
  FROM FACT.FINANCIAL_TRANSACTION t
  GROUP BY t.STUDENT_ID, t.TERM_ID
),
advising AS (
  SELECT
    ap.STUDENT_ID,
    tm.TERM_ID,
    COUNT(*) AS ADVISING_APPOINTMENTS_COUNT,
    MAX(ap.APPOINTMENT_DT) AS LAST_ADVISING_DT
  FROM FACT.ADVISING ap
  JOIN DIM.TERM tm
    ON ap.APPOINTMENT_DT >= tm.START_DATE
   AND ap.APPOINTMENT_DT <= tm.END_DATE
  GROUP BY ap.STUDENT_ID, tm.TERM_ID
)
SELECT
  ea.STUDENT_ID,
  ea.TERM_ID,
  ds.FIRST_NAME,
  ds.LAST_NAME,
  ds.PROGRAM,
  ds.MAJOR,
  ds.RESIDENCY,
  ds.ADVISOR_ID,
  dt.TERM_NAME,
  dt.START_DATE,
  dt.END_DATE,
  ea.NUM_COURSES,
  ea.TOTAL_UNITS,
  pg.PRIOR_TERM_GPA,
  eng.ENGAGEMENT_EVENTS_TTD,
  IFF(ea.NUM_COURSES > 0, eng.ENGAGEMENT_EVENTS_TTD / ea.NUM_COURSES, NULL) AS AVG_EVENTS_PER_COURSE,
  fin.TOTAL_CHARGES,
  fin.TOTAL_PAYMENTS,
  fin.BALANCE,
  adv.ADVISING_APPOINTMENTS_COUNT,
  adv.LAST_ADVISING_DT
FROM enroll_agg ea
JOIN DIM.STUDENT ds ON ds.STUDENT_ID = ea.STUDENT_ID
JOIN DIM.TERM dt ON dt.TERM_ID = ea.TERM_ID
LEFT JOIN prior_gpa pg ON pg.STUDENT_ID = ea.STUDENT_ID AND pg.TERM_ID = ea.TERM_ID
LEFT JOIN engagement eng ON eng.STUDENT_ID = ea.STUDENT_ID AND eng.TERM_ID = ea.TERM_ID
LEFT JOIN financial fin ON fin.STUDENT_ID = ea.STUDENT_ID AND fin.TERM_ID = ea.TERM_ID
LEFT JOIN advising adv ON adv.STUDENT_ID = ea.STUDENT_ID AND adv.TERM_ID = ea.TERM_ID;

-- =============================================================
-- CourseSectionSummary: one row per section (by term)
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.COURSE_SECTION_SUMMARY
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
WITH enr AS (
  SELECT
    e.COURSE_SECTION_ID,
    COUNT(DISTINCT e.STUDENT_ID) AS ENROLLED_STUDENTS,
    SUM(e.ATTEMPTED_UNITS) / NULLIF(COUNT(*), 0) AS AVG_UNITS,
    AVG(IFF(e.GRADE_LETTER IS NOT NULL AND e.GRADE_LETTER <> '', 1, 0)) AS COMPLETION_RATE
  FROM FACT.ENROLLMENT e
  GROUP BY e.COURSE_SECTION_ID
),
eng AS (
  SELECT
    ed.COURSE_SECTION_ID,
    SUM(ed.EVENT_COUNT) AS ENGAGEMENT_EVENTS_TOTAL
  FROM FACT.ENGAGEMENT_DAILY ed
  GROUP BY ed.COURSE_SECTION_ID
)
SELECT
  s.COURSE_SECTION_ID,
  s.TERM_ID,
  s.COURSE_ID,
  s.SUBJECT,
  s.CATALOG_NBR,
  s.TITLE,
  s.UNITS,
  s.MODALITY,
  enr.ENROLLED_STUDENTS,
  enr.AVG_UNITS,
  eng.ENGAGEMENT_EVENTS_TOTAL,
  IFF(enr.ENROLLED_STUDENTS > 0, eng.ENGAGEMENT_EVENTS_TOTAL / enr.ENROLLED_STUDENTS, NULL) AS EVENTS_PER_STUDENT,
  enr.COMPLETION_RATE
FROM DIM.SECTION s
LEFT JOIN enr ON enr.COURSE_SECTION_ID = s.COURSE_SECTION_ID
LEFT JOIN eng ON eng.COURSE_SECTION_ID = s.COURSE_SECTION_ID;

-- =============================================================
-- EngagementWeeklyTrend: student + section + week
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.ENGAGEMENT_WEEKLY_TREND
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
WITH weekly AS (
  SELECT
    ed.STUDENT_ID,
    ed.COURSE_SECTION_ID,
    DATE_TRUNC('WEEK', ed.EVENT_DATE) AS WEEK_START,
    SUM(ed.EVENT_COUNT) AS WEEKLY_EVENT_COUNT
  FROM FACT.ENGAGEMENT_DAILY ed
  GROUP BY ed.STUDENT_ID, ed.COURSE_SECTION_ID, DATE_TRUNC('WEEK', ed.EVENT_DATE)
)
SELECT
  w.STUDENT_ID,
  w.COURSE_SECTION_ID,
  w.WEEK_START,
  w.WEEKLY_EVENT_COUNT,
  w.WEEKLY_EVENT_COUNT - LAG(w.WEEKLY_EVENT_COUNT) OVER (
    PARTITION BY w.STUDENT_ID, w.COURSE_SECTION_ID ORDER BY w.WEEK_START
  ) AS WOW_CHANGE
FROM weekly w;

-- =============================================================
-- FinancialTermSummary: student + term financial rollup
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.FINANCIAL_TERM_SUMMARY
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
SELECT
  t.STUDENT_ID,
  t.TERM_ID,
  SUM(IFF(t.IS_CHARGE = 1, t.AMOUNT, 0)) AS TOTAL_CHARGES,
  SUM(IFF(t.IS_PAYMENT = 1, t.AMOUNT, 0)) AS TOTAL_PAYMENTS,
  SUM(t.SIGNED_AMOUNT) AS BALANCE,
  COUNT_IF(t.IS_PAYMENT = 1) AS NUM_PAYMENTS,
  MAX(IFF(t.IS_PAYMENT = 1, t.TRANS_DT, NULL)) AS LAST_PAYMENT_DT
FROM FACT.FINANCIAL_TRANSACTION t
GROUP BY t.STUDENT_ID, t.TERM_ID;

-- =============================================================
-- AdvisingSummary: student + term advising rollup
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.ADVISING_SUMMARY
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
SELECT
  ap.STUDENT_ID,
  tm.TERM_ID,
  COUNT(*) AS APPOINTMENTS_COUNT,
  MAX(ap.APPOINTMENT_DT) AS LAST_APPOINTMENT_DT
FROM FACT.ADVISING ap
JOIN DIM.TERM tm
  ON ap.APPOINTMENT_DT >= tm.START_DATE
 AND ap.APPOINTMENT_DT <= tm.END_DATE
GROUP BY ap.STUDENT_ID, tm.TERM_ID;

-- =============================================================
-- ProgramCohortOverview: program/major by term from StudentTermSummary
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.PROGRAM_COHORT_OVERVIEW
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
SELECT
  sts.PROGRAM,
  sts.MAJOR,
  sts.TERM_ID,
  COUNT(DISTINCT sts.STUDENT_ID) AS HEADCOUNT,
  AVG(sts.TOTAL_UNITS) AS AVG_UNITS,
  AVG(sts.PRIOR_TERM_GPA) AS AVG_PRIOR_GPA,
  AVG(NULLIF(sts.NUM_COURSES,0)) AS AVG_NUM_COURSES,
  AVG(sts.ENGAGEMENT_EVENTS_TTD) AS AVG_ENG_EVENTS,
  AVG(IFF(sts.BALANCE > 0, 1, 0)) AS BALANCE_RATE
FROM REPORTS.STUDENT_TERM_SUMMARY sts
GROUP BY sts.PROGRAM, sts.MAJOR, sts.TERM_ID;

-- =============================================================
-- AtRiskStudents: simple rule-based flags from StudentTermSummary
-- =============================================================
CREATE OR REPLACE DYNAMIC TABLE REPORTS.AT_RISK_STUDENTS
  TARGET_LAG = 'DOWNSTREAM'
  WAREHOUSE = COMPUTE_WH
AS
SELECT
  sts.STUDENT_ID,
  sts.TERM_ID,
  sts.FIRST_NAME,
  sts.LAST_NAME,
  sts.PROGRAM,
  sts.MAJOR,
  sts.NUM_COURSES,
  sts.TOTAL_UNITS,
  sts.PRIOR_TERM_GPA,
  sts.ENGAGEMENT_EVENTS_TTD,
  sts.BALANCE,
  sts.ADVISING_APPOINTMENTS_COUNT,
  IFF(sts.ENGAGEMENT_EVENTS_TTD < 20, 1, 0) AS LOW_ENGAGEMENT,
  IFF(sts.BALANCE > 1000, 1, 0) AS HIGH_BALANCE,
  IFF(sts.PRIOR_TERM_GPA IS NOT NULL AND sts.PRIOR_TERM_GPA < 2.0, 1, 0) AS LOW_PRIOR_GPA,
  IFF(NVL(sts.ADVISING_APPOINTMENTS_COUNT, 0) = 0, 1, 0) AS NO_ADVISING,
  LISTAGG(reason, '; ') WITHIN GROUP (ORDER BY reason) AS RISK_REASONS
FROM REPORTS.STUDENT_TERM_SUMMARY sts,
LATERAL FLATTEN (INPUT => ARRAY_CONSTRUCT_COMPACT(
  IFF(sts.ENGAGEMENT_EVENTS_TTD < 20, 'Low engagement', NULL),
  IFF(sts.BALANCE > 1000, 'High balance', NULL),
  IFF(sts.PRIOR_TERM_GPA IS NOT NULL AND sts.PRIOR_TERM_GPA < 2.0, 'Low prior GPA', NULL),
  IFF(NVL(sts.ADVISING_APPOINTMENTS_COUNT, 0) = 0, 'No advising', NULL)
)) f,
LATERAL (SELECT f.value::string AS reason) r
GROUP BY
  sts.STUDENT_ID, sts.TERM_ID, sts.FIRST_NAME, sts.LAST_NAME, sts.PROGRAM, sts.MAJOR,
  sts.NUM_COURSES, sts.TOTAL_UNITS, sts.PRIOR_TERM_GPA, sts.ENGAGEMENT_EVENTS_TTD, sts.BALANCE, sts.ADVISING_APPOINTMENTS_COUNT;


