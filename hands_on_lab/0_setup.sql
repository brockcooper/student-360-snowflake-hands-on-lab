-- Snowflake Hands-on Lab: Initial setup
-- All objects owned/created by SYSADMIN

-- Ensure correct role
USE ROLE SYSADMIN;

-- Create database (idempotent)
CREATE DATABASE IF NOT EXISTS STUDENT_DATA_LAKE;
USE DATABASE STUDENT_DATA_LAKE;

-- Create source schemas
CREATE SCHEMA IF NOT EXISTS SIS;
CREATE SCHEMA IF NOT EXISTS LMS;
CREATE SCHEMA IF NOT EXISTS ADMISSIONS;
CREATE SCHEMA IF NOT EXISTS FINANCIALS;
CREATE SCHEMA IF NOT EXISTS STUDENT_ADVISING;
CREATE SCHEMA IF NOT EXISTS ADMIN;

-- Use ADMIN schema for shared items
USE SCHEMA ADMIN;

-- Generic CSV file format (best practice defaults)
CREATE OR REPLACE FILE FORMAT CSV_STANDARD
  TYPE = CSV
  FIELD_DELIMITER = ','
  SKIP_HEADER = 0
  PARSE_HEADER = TRUE
  FIELD_OPTIONALLY_ENCLOSED_BY = '"'
  NULL_IF = ('', 'NULL', 'null')
  EMPTY_FIELD_AS_NULL = TRUE
  COMPRESSION = AUTO
  DATE_FORMAT = 'AUTO'
  TIME_FORMAT = 'AUTO'
  TIMESTAMP_FORMAT = 'AUTO'
  TRIM_SPACE = TRUE;

-- External stage referencing public S3 bucket
-- Update credentials if bucket is private; for public buckets, no credentials required
CREATE OR REPLACE STAGE STUDENT_DATA_STAGE
  URL = 's3://snowflake-student-360-hol-975500823464'
  FILE_FORMAT = CSV_STANDARD;

-- =============================================================
-- Tables and Data Load (idempotent)
-- =============================================================

USE DATABASE STUDENT_DATA_LAKE;

-- SIS schema tables
USE SCHEMA SIS;

CREATE OR REPLACE TABLE STUDENTS (
  STUDENT_ID NUMBER,
  FIRST_NAME VARCHAR,
  LAST_NAME VARCHAR,
  EMAIL VARCHAR,
  DOB DATE,
  GENDER VARCHAR,
  ETHNICITY VARCHAR,
  RESIDENCY VARCHAR,
  PROGRAM VARCHAR,
  MAJOR VARCHAR,
  ADMIT_TERM_ID VARCHAR,
  CURRENT_TERM_ID VARCHAR,
  CLASS_STANDING VARCHAR,
  ADVISOR_ID VARCHAR
);

CREATE OR REPLACE TABLE TERMS (
  TERM_ID VARCHAR,
  TERM_NAME VARCHAR,
  START_DATE DATE,
  END_DATE DATE
);

CREATE OR REPLACE TABLE COURSES (
  COURSE_ID VARCHAR,
  SUBJECT VARCHAR,
  CATALOG_NBR VARCHAR,
  TITLE VARCHAR,
  UNITS NUMBER
);

CREATE OR REPLACE TABLE SECTIONS (
  COURSE_SECTION_ID VARCHAR,
  COURSE_ID VARCHAR,
  TERM_ID VARCHAR,
  SECTION_NBR NUMBER,
  MODALITY VARCHAR
);

CREATE OR REPLACE TABLE ENROLLMENTS (
  STUDENT_ID NUMBER,
  COURSE_SECTION_ID VARCHAR,
  TERM_ID VARCHAR,
  ENROLLMENT_STATUS VARCHAR,
  GRADE_LETTER VARCHAR,
  GRADE_POINTS NUMBER(3,1)
);

TRUNCATE TABLE STUDENTS;
TRUNCATE TABLE TERMS;
TRUNCATE TABLE COURSES;
TRUNCATE TABLE SECTIONS;
TRUNCATE TABLE ENROLLMENTS;

COPY INTO STUDENTS FROM @ADMIN.STUDENT_DATA_STAGE/sis/students.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO TERMS FROM @ADMIN.STUDENT_DATA_STAGE/sis/terms.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO COURSES FROM @ADMIN.STUDENT_DATA_STAGE/sis/courses.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO SECTIONS FROM @ADMIN.STUDENT_DATA_STAGE/sis/sections.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO ENROLLMENTS FROM @ADMIN.STUDENT_DATA_STAGE/sis/enrollments.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

-- LMS schema tables
USE SCHEMA LMS;

CREATE OR REPLACE TABLE COURSE_XWALK (
  COURSE_SECTION_ID VARCHAR,
  LMS_COURSE_ID VARCHAR
);

CREATE OR REPLACE TABLE LMS_LOGINS (
  STUDENT_ID NUMBER,
  LMS_COURSE_ID VARCHAR,
  EVENT_TS TIMESTAMP_NTZ,
  EVENT_TYPE VARCHAR
);

CREATE OR REPLACE TABLE SUBMISSIONS (
  STUDENT_ID NUMBER,
  LMS_COURSE_ID VARCHAR,
  ASSIGNMENT_ID VARCHAR,
  SUBMITTED_TS TIMESTAMP_NTZ,
  SCORE NUMBER,
  MAX_SCORE NUMBER,
  LATE_FLAG VARCHAR
);

TRUNCATE TABLE COURSE_XWALK;
TRUNCATE TABLE LMS_LOGINS;
TRUNCATE TABLE SUBMISSIONS;

COPY INTO COURSE_XWALK FROM @ADMIN.STUDENT_DATA_STAGE/lms/course_xwalk.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO LMS_LOGINS FROM @ADMIN.STUDENT_DATA_STAGE/lms/lms_logins.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO SUBMISSIONS FROM @ADMIN.STUDENT_DATA_STAGE/lms/submissions.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

-- ADMISSIONS schema tables
USE SCHEMA ADMISSIONS;

CREATE OR REPLACE TABLE APPLICATIONS (
  STUDENT_ID NUMBER,
  APPLICATION_ID VARCHAR,
  APP_TERM_ID VARCHAR,
  APP_COMPLETE_DT DATE,
  DECISION VARCHAR,
  DECISION_DT DATE,
  DEPOSIT_FLAG VARCHAR
);

CREATE OR REPLACE TABLE TESTS (
  STUDENT_ID NUMBER,
  TEST_TYPE VARCHAR,
  TEST_DATE DATE,
  SCORE NUMBER
);

TRUNCATE TABLE APPLICATIONS;
TRUNCATE TABLE TESTS;

COPY INTO APPLICATIONS FROM @ADMIN.STUDENT_DATA_STAGE/admissions/applications.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO TESTS FROM @ADMIN.STUDENT_DATA_STAGE/admissions/tests.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

-- FINANCIALS schema tables
USE SCHEMA FINANCIALS;

CREATE OR REPLACE TABLE STUDENT_ACCOUNTS (
  STUDENT_ID NUMBER,
  TERM_ID VARCHAR,
  TOTAL_CHARGES NUMBER(12,2),
  TOTAL_PAYMENTS NUMBER(12,2),
  BALANCE NUMBER(12,2)
);

CREATE OR REPLACE TABLE TRANSACTIONS (
  TRANSACTION_ID VARCHAR,
  STUDENT_ID NUMBER,
  TERM_ID VARCHAR,
  TRANS_DT DATE,
  TRANS_TYPE VARCHAR,
  AMOUNT NUMBER(12,2),
  METHOD VARCHAR
);

CREATE OR REPLACE TABLE AID_AWARDS (
  AWARD_ID VARCHAR,
  STUDENT_ID NUMBER,
  TERM_ID VARCHAR,
  AID_TYPE VARCHAR,
  AMOUNT NUMBER(12,2),
  DISBURSED_DT DATE
);

TRUNCATE TABLE STUDENT_ACCOUNTS;
TRUNCATE TABLE TRANSACTIONS;
TRUNCATE TABLE AID_AWARDS;

COPY INTO STUDENT_ACCOUNTS FROM @ADMIN.STUDENT_DATA_STAGE/financials/student_accounts.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO TRANSACTIONS FROM @ADMIN.STUDENT_DATA_STAGE/financials/transactions.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO AID_AWARDS FROM @ADMIN.STUDENT_DATA_STAGE/financials/aid_awards.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

-- STUDENT_ADVISING schema tables
USE SCHEMA STUDENT_ADVISING;

CREATE OR REPLACE TABLE ADVISORS (
  ADVISOR_ID VARCHAR,
  ADVISOR_NAME VARCHAR,
  DEPARTMENT VARCHAR
);

CREATE OR REPLACE TABLE APPOINTMENTS (
  APPOINTMENT_ID VARCHAR,
  STUDENT_ID NUMBER,
  ADVISOR_ID VARCHAR,
  APPOINTMENT_DT DATE,
  OUTCOME VARCHAR
);

CREATE OR REPLACE TABLE NOTES (
  NOTE_ID VARCHAR,
  STUDENT_ID NUMBER,
  ADVISOR_ID VARCHAR,
  NOTE_DT DATE,
  CATEGORY VARCHAR,
  RISK_FLAG VARCHAR
);

TRUNCATE TABLE ADVISORS;
TRUNCATE TABLE APPOINTMENTS;
TRUNCATE TABLE NOTES;

COPY INTO ADVISORS FROM @ADMIN.STUDENT_DATA_STAGE/student_advising/advisors.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO APPOINTMENTS FROM @ADMIN.STUDENT_DATA_STAGE/student_advising/appointments.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

COPY INTO NOTES FROM @ADMIN.STUDENT_DATA_STAGE/student_advising/notes.csv
  FILE_FORMAT = (FORMAT_NAME = 'ADMIN.CSV_STANDARD')
  MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE
  ON_ERROR = 'CONTINUE';

-- =============================================================
-- Analytics Warehouse Database and Schemas (created by SYSADMIN)
-- =============================================================
USE ROLE SYSADMIN;
CREATE DATABASE IF NOT EXISTS STUDENT_DATA_WAREHOUSE;
USE DATABASE STUDENT_DATA_WAREHOUSE;

CREATE SCHEMA IF NOT EXISTS STAGE;
CREATE SCHEMA IF NOT EXISTS DIM;
CREATE SCHEMA IF NOT EXISTS FACT;
CREATE SCHEMA IF NOT EXISTS REPORTS;


